---
import { Image } from "astro:assets";
import { sanityClient } from "sanity:client";

import type { Project } from "@leon/cms/types";

import arrowLeftSvg from "~/assets/arrow-left.svg";
import ContentContainer from "~/components/common/ContentContainer";
import MobileHeader from "~/components/common/MobileHeader";
import RailContainer from "~/components/common/RailContainer";
import RailNav from "~/components/common/RailNav";
import SEO from "~/components/SEO.astro";
import ProjectDetails from "~/components/work/ProjectDetails.astro";
import ProjectGradientBackground from "~/components/work/ProjectGradientBackground";
import ProjectLogo from "~/components/work/ProjectLogo";
import Layout from "~/layouts/Layout.astro";
import { urlFor } from "~/lib/sanity";

const PROJECT_QUERY = `*[_type == "project" && slug.current == $slug][0]`;

const project = await sanityClient.fetch<Project>(PROJECT_QUERY, Astro.params);

export async function getStaticPaths(): Promise<{ params: { slug: string } }> {
  const SLUGS_QUERY = `*[_type == "project" && defined(slug.current)]{
    "params": {"slug": slug.current}
  }`;
  return await sanityClient.fetch(SLUGS_QUERY, Astro.params);
}

const darkLogoImageUrl = project.logos
  ? urlFor(project.logos.darkMode ?? "")?.url()
  : null;

const lightLogoImageUrl = project.logos
  ? urlFor(project.logos.lightMode ?? "")?.url()
  : null;

const sampleImages = project.sampleImages
  ? project.sampleImages
      .map((sampleImage) => {
        const sampleImageUrl = sampleImage.image
          ? urlFor(sampleImage.image)?.url()
          : null;

        return sampleImageUrl;
      })
      .filter(Boolean)
  : [];
---

<Layout>
  <SEO
    title=`Leon Esquillon | ${project.title}`
    description="Explore this UI/UX design project, showcasing the process, challenges, and user-centered solutions."
    slot="seo"
  />
  <ProjectGradientBackground gradients={project.gradients} client:only />
  <RailContainer className="ps-20">
    <RailNav href="/">LEON</RailNav>
  </RailContainer>
  <MobileHeader title="WORK" client:load />
  <ContentContainer
    className="h-screen gap-10 overflow-y-auto px-4 pb-16 lg:flex-col lg:border-x lg:px-10"
  >
    <div class="flex flex-col gap-10 pt-2 lg:pt-20">
      <a
        href="/work"
        class="flex w-fit flex-row items-center gap-2 rounded-md border border-border px-2 py-1"
      >
        <Image src={arrowLeftSvg} alt="arrow-left" width="16" height="16" />
        <p class="font-sans text-sm font-semibold text-muted-foreground">
          Back
        </p>
      </a>
      <div class="flex flex-col gap-8 lg:flex-row">
        <div
          class="flex w-full flex-1 flex-col items-start justify-center gap-5 lg:items-center"
        >
          <div>
            <ProjectLogo client:only>
              {
                darkLogoImageUrl && (
                  <Image
                    slot="darkModeLogo"
                    src={darkLogoImageUrl}
                    alt="logo"
                    inferSize
                  />
                )
              }
              {
                lightLogoImageUrl && (
                  <Image
                    slot="lightModeLogo"
                    src={lightLogoImageUrl}
                    alt="logo"
                    inferSize
                  />
                )
              }
            </ProjectLogo>
          </div>
        </div>
        <ProjectDetails project={project} />
      </div>
    </div>
    <div class="flex flex-col gap-4 lg:gap-10">
      {
        sampleImages.map((sampleImage) => (
          <img
            src={sampleImage}
            alt="sample image"
            class="w-full object-contain"
          />
        ))
      }
    </div>
  </ContentContainer>
  <RailContainer className="pe-20">
    <RailNav href="/contact">CONTACT</RailNav>
  </RailContainer>
</Layout>
